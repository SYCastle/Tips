■インターフェースの連携
■■そのインターフェースで本当に実装しそうか?

■■■そもそも実装しようとしているロジックは?
b-bit minhash
https://www.jstage.jst.go.jp/article/essfr/7/3/7_256/_pdf

■■■■本当にそのロジックで期待結果は得られそう? / 実装できそう?
minhash
→https://qiita.com/yamaneko1212/items/817859705e41d2c26247 ★★★
  https://camberbridge.github.io/2016/10/05/Min-Hash%E3%81%AB%E3%82%88%E3%82%8BJaccard%E4%BF%82%E6%95%B0%E3%81%AE%E8%BF%91%E4%BC%BC%E5%AE%9F%E9%A8%93/ ★★★

b-bit
→http://yukihir0.hatenablog.jp/entry/2013/08/15/142713
https://qiita.com/y_matsuwitter/items/505565d1ccf403a48c77






■そのほか
■■minhash概要
https://developer.smartnews.com/blog/2013/08/05/efficient-similarity-estimation-using-b-bit-minhash/
https://www.slideshare.net/iwiwi/minhash


集合の類似度として、jaccard係数を考える。
→類似度 = 「jaccard係数」 = 整数型
  →インプットは?
     普通は、比べる集合Aと集合B

文書数が増えてくると、Jaccard係数を毎回計算するのはあまりにも時間がかかり、現実的ではありません。
そこで考案された手法の1つがMinHashです。

★保存するのはk個のハッシュ関数おのおのの最小hash値
→b-bit minhashによって、64個のハッシュ関数を使った場合、計算結果を64bitで表現できるようになる
→→string型

★Aにおける最小ハッシュ値とBにおける最小ハッシュ値が一致する確率は、AとBのJaccard係数に等しくなります
→類似度は、ハッシュ値をインプットに行う


■■ハッシュ値とは
https://wa3.i-3-i.info/word11949.html

■■ハッシュ関数とは
ハッシュ関数とは入力した値に対して、まったく別の値が出力されるという暗号方式です。
ハッシュ値から元の値を探し出すことは難しいです。

このことを不可逆性と呼びます。

つまり、一方向にしか作用しない関数ということです。

この性質により強い暗号化が可能となります。

■■b-bit minhash
MinHashで最小ハッシュ値を保存するとき、そのビット数を節約することを考えます

https://qiita.com/y_matsuwitter/items/505565d1ccf403a48c77
→1bitであれば、例えば64個のハッシュ関数を用いた場合、計算結果を64bit値で表現して、各々のXORからのPopcountで最小値が一致した数を効率よく算出できます。


■hash計算の高速化
https://developer.smartnews.com/blog/2013/08/05/efficient-similarity-estimation-using-b-bit-minhash/
https://tech.preferred.jp/ja/blog/minhash/
